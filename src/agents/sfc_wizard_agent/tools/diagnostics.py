#!/usr/bin/env python3
"""
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved. SPDX-License-Identifier: MIT-0

SFC Configuration Diagnostics
Provides functions for diagnosing issues and suggesting optimizations for SFC configurations
"""

import json
from typing import Dict, Any, List


def diagnose_issue(issue_description: str, config_json: str, sfc_knowledge: Dict[str, Any]) -> str:
    """Diagnose SFC issues based on issue description and configuration
    
    Args:
        issue_description: Description of the issue
        config_json: JSON string containing the SFC configuration
        sfc_knowledge: Dictionary containing SFC framework knowledge
        
    Returns:
        String containing the diagnosis results
    """
    issue_lower = issue_description.lower()
    diagnosis = ["üîç SFC Issue Diagnosis\n"]

    # Connection issues
    if any(
        keyword in issue_lower
        for keyword in ["connect", "connection", "timeout", "unreachable"]
    ):
        diagnosis.extend(
            [
                "üîå **Connection Issues Detected**",
                "‚Ä¢ Check network connectivity between SFC and target devices",
                "‚Ä¢ Verify firewall rules allow required ports",
                "‚Ä¢ Confirm device IP addresses and ports in configuration",
                "‚Ä¢ Test connectivity using ping or telnet",
                "‚Ä¢ Check if devices are powered on and operational",
                "",
            ]
        )

    # Authentication issues
    if any(
        keyword in issue_lower
        for keyword in ["auth", "credential", "permission", "unauthorized"]
    ):
        diagnosis.extend(
            [
                "üîê **Authentication Issues Detected**",
                "‚Ä¢ Verify AWS credentials are correctly configured",
                "‚Ä¢ Check IAM roles and policies for required permissions",
                "‚Ä¢ Confirm certificate paths and validity (for IoT/TLS)",
                "‚Ä¢ Validate username/password for protocol adapters",
                "‚Ä¢ Review AWS Secrets Manager configuration if used",
                "",
            ]
        )

    # Configuration issues
    if any(
        keyword in issue_lower
        for keyword in ["config", "invalid", "missing", "error"]
    ):
        diagnosis.extend(
            [
                "‚öôÔ∏è **Configuration Issues Detected**",
                "‚Ä¢ Validate JSON syntax using a JSON validator",
                "‚Ä¢ Check all required sections are present",
                "‚Ä¢ Verify protocol adapter and target type configurations",
                "‚Ä¢ Confirm schedule references match source/target names",
                "‚Ä¢ Review data type compatibility between sources and targets",
                "",
            ]
        )

    # Performance issues
    if any(
        keyword in issue_lower
        for keyword in ["slow", "performance", "memory", "cpu", "lag"]
    ):
        diagnosis.extend(
            [
                "‚ö° **Performance Issues Detected**",
                "‚Ä¢ Review data collection intervals and batch sizes",
                "‚Ä¢ Check memory usage and increase JVM heap if needed",
                "‚Ä¢ Monitor network bandwidth utilization",
                "‚Ä¢ Consider using data filtering to reduce volume",
                "‚Ä¢ Implement data aggregation for high-frequency sources",
                "",
            ]
        )

    # Data quality issues
    if any(
        keyword in issue_lower
        for keyword in ["data", "missing", "incorrect", "timestamp"]
    ):
        diagnosis.extend(
            [
                "üìä **Data Quality Issues Detected**",
                "‚Ä¢ Verify channel configurations match device data points",
                "‚Ä¢ Check data type mappings and transformations",
                "‚Ä¢ Review timestamp configuration and time zones",
                "‚Ä¢ Validate data filtering and change detection settings",
                "‚Ä¢ Monitor source device status and availability",
                "",
            ]
        )

    # If we have a configuration, provide specific analysis
    if config_json:
        try:
            config = json.loads(config_json)
            diagnosis.extend(
                [
                    "üìã **Configuration Analysis:**",
                    f"‚Ä¢ Schedules defined: {len(config.get('Schedules', []))}",
                    f"‚Ä¢ Sources configured: {len(config.get('Sources', {}))}",
                    f"‚Ä¢ Targets configured: {len(config.get('Targets', {}))}",
                    f"‚Ä¢ Log level: {config.get('LogLevel', 'Not set')}",
                    "",
                ]
            )
        except:
            diagnosis.append("‚ö†Ô∏è Could not parse provided configuration")

    if len(diagnosis) == 1:  # Only header added
        diagnosis.extend(
            [
                "‚ùì **General Troubleshooting Steps:**",
                "‚Ä¢ Check SFC logs for specific error messages",
                "‚Ä¢ Verify all required JAR files are present",
                "‚Ä¢ Confirm Java version compatibility (JVM 1.8+)",
                "‚Ä¢ Test with a minimal configuration first",
                "‚Ä¢ Enable trace logging for detailed diagnostics",
            ]
        )

    return "\n".join(diagnosis)


def suggest_optimizations(
    config_json: str, performance_requirements: str, sfc_knowledge: Dict[str, Any]
) -> str:
    """Suggest optimizations for an SFC configuration
    
    Args:
        config_json: JSON string containing the SFC configuration
        performance_requirements: Description of performance requirements
        sfc_knowledge: Dictionary containing SFC framework knowledge
        
    Returns:
        String containing optimization suggestions
    """
    try:
        config = json.loads(config_json)
    except:
        return "‚ùå Invalid JSON configuration provided"

    suggestions = ["üöÄ SFC Optimization Suggestions\n"]

    # Analyze schedules
    schedules = config.get("Schedules", [])
    for schedule in schedules:
        interval = schedule.get("Interval", 1000)
        if interval < 100:
            suggestions.append(
                f"‚ö†Ô∏è Schedule '{schedule.get('Name')}' has very fast interval ({interval}ms). Consider increasing for better performance."
            )

    # Analyze targets
    targets = config.get("Targets", {})
    for target_name, target_config in targets.items():
        target_type = target_config.get("TargetType", "")

        # S3 optimizations
        if target_type == "AWS-S3":
            buffer_size = target_config.get("BufferSize", 1)
            if buffer_size < 10:
                suggestions.append(
                    f"üí° Target '{target_name}': Increase BufferSize to 10+ for better S3 performance"
                )

            if "Compression" not in target_config:
                suggestions.append(
                    f"üí° Target '{target_name}': Enable compression (Gzip/Zip) to reduce S3 storage costs"
                )

        # Streaming targets
        elif target_type in ["AWS-KINESIS", "AWS-IOT-CORE"]:
            if "BufferSize" not in target_config:
                suggestions.append(
                    f"üí° Target '{target_name}': Add buffering for better throughput"
                )

    # General optimizations based on requirements
    if "high throughput" in performance_requirements.lower():
        suggestions.extend(
            [
                "",
                "üèéÔ∏è **High Throughput Optimizations:**",
                "‚Ä¢ Use parallel processing with multiple adapter instances",
                "‚Ä¢ Implement data aggregation to reduce message volume",
                "‚Ä¢ Consider using streaming targets (Kinesis) over batch targets",
                "‚Ä¢ Increase JVM heap size and tune garbage collection",
            ]
        )

    if "low latency" in performance_requirements.lower():
        suggestions.extend(
            [
                "",
                "‚ö° **Low Latency Optimizations:**",
                "‚Ä¢ Use subscription mode for OPC-UA instead of polling",
                "‚Ä¢ Minimize data transformations and filtering",
                "‚Ä¢ Use direct streaming targets (IoT Core, Kinesis)",
                "‚Ä¢ Deploy protocol adapters close to data sources",
            ]
        )

    if "cost optimization" in performance_requirements.lower():
        suggestions.extend(
            [
                "",
                "üí∞ **Cost Optimization:**",
                "‚Ä¢ Enable data compression for S3 targets",
                "‚Ä¢ Use data filtering to reduce unnecessary data transmission",
                "‚Ä¢ Implement change-based data collection",
                "‚Ä¢ Consider data aggregation to reduce API calls",
            ]
        )

    return (
        "\n".join(suggestions)
        if len(suggestions) > 1
        else "‚úÖ Configuration appears well-optimized"
    )
